/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NoteCollectorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  collections: [{
    id: "default",
    name: "\u9ED8\u8BA4\u6536\u96C6\u7BB1",
    description: "\u9ED8\u8BA4\u7684\u6536\u96C6\u7BB1",
    createdTime: Date.now()
  }],
  fragments: [],
  defaultCollectionId: "default"
};
var NoteCollectorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        const selection = window.getSelection();
        if (selection && selection.rangeCount > 0) {
          const range = selection.getRangeAt(0);
          const rect = range.getBoundingClientRect();
          menu.showAtPosition({ x: rect.left, y: rect.bottom });
        }
        menu.addItem((item) => {
          item
            .setTitle("添加到收集箱")
            .setIcon("star")
            .onClick(async () => {
              const selection = editor.getSelection();
              if (selection) {
                await this.showCollectionSelector(selection, view.file);
              }
            });
        });
      })
    );
    this.addSettingTab(new NoteCollectorSettingTab(this.app, this));
    this.addRibbonIcon("star", "Note Collector", () => {
      this.activateView();
    });
    this.registerView(
      "note-collector-view",
      (leaf) => new NoteCollectorView(leaf, this)
    );
  }
  async showCollectionSelector(content, file) {
    const collections = this.settings.collections;
    if (collections.length === 1) {
      await this.collectFragment(content, file, collections[0].id);
      return;
    }
    const menu = new import_obsidian.Menu();
    collections.forEach((collection) => {
      menu.addItem((item) => {
        item.setTitle(collection.name).setIcon("folder").onClick(async () => {
          await this.collectFragment(content, file, collection.id);
        });
      });
    });
    const selection = window.getSelection();
    if (selection && selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      const rect = range.getBoundingClientRect();
      menu.showAtPosition({ x: rect.left, y: rect.bottom });
    }
  }
  async collectFragment(content, file, collectionId) {
    const fragment = {
      id: Date.now().toString(),
      content,
      sourceFile: file.basename,
      sourcePath: file.path,
      createdTime: Date.now(),
      collectionId,
      position: {
        line: 0,
        offset: 0
      }
    };
    this.settings.fragments.push(fragment);
    await this.saveSettings();
    const collection = this.settings.collections.find((c) => c.id === collectionId);
    new import_obsidian.Notice(`\u5185\u5BB9\u5DF2\u6536\u85CF\u5230"${(collection == null ? void 0 : collection.name) || "\u672A\u77E5\u6536\u96C6\u7BB1"}"`);
    this.app.workspace.getLeavesOfType("note-collector-view").forEach((leaf) => {
      if (leaf.view instanceof NoteCollectorView) {
        leaf.view.refresh();
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  getCollectionName(collectionId) {
    var _a;
    return ((_a = this.settings.collections.find((c) => c.id === collectionId)) == null ? void 0 : _a.name) || "\u672A\u77E5\u6536\u96C6\u7BB1";
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType("note-collector-view")[0];
    
    if (!leaf) {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({
        type: "note-collector-view",
        active: true,
        state: { collectionId: this.settings.defaultCollectionId }
      });
    }
    
    workspace.revealLeaf(leaf);
  }
  async deleteFragment(id) {
    this.settings.fragments = this.settings.fragments.filter((f) => f.id !== id);
    await this.saveSettings();
  }
};
var NoteCollectorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u6536\u96C6\u7BB1\u7BA1\u7406" });
    new import_obsidian.Setting(containerEl).setName("\u9ED8\u8BA4\u6536\u96C6\u7BB1").setDesc("\u9009\u62E9\u9ED8\u8BA4\u7684\u6536\u96C6\u7BB1").addDropdown((dropdown) => {
      this.plugin.settings.collections.forEach((collection) => {
        dropdown.addOption(collection.id, collection.name);
      });
      dropdown.setValue(this.plugin.settings.defaultCollectionId || "default");
      dropdown.onChange(async (value) => {
        this.plugin.settings.defaultCollectionId = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("\u6DFB\u52A0\u65B0\u6536\u96C6\u7BB1").setDesc("\u521B\u5EFA\u4E00\u4E2A\u65B0\u7684\u6536\u96C6\u7BB1").addButton((button) => button.setButtonText("\u65B0\u5EFA\u6536\u96C6\u7BB1").setCta().onClick(async () => {
      const modal = new CollectionModal(
        this.app,
        async (result) => {
          if (result) {
            const collection = {
              id: Date.now().toString(),
              name: result.name,
              description: result.description,
              createdTime: Date.now()
            };
            this.plugin.settings.collections.push(collection);
            await this.plugin.saveSettings();
            
            // 刷新所有打开的 Note Collector 视图
            this.app.workspace.getLeavesOfType("note-collector-view").forEach((leaf) => {
              if (leaf.view instanceof NoteCollectorView) {
                leaf.view.onOpen(); // 使用 onOpen 来完全重新初始化视图
              }
            });
            
            this.display();
          }
        }
      );
      modal.open();
    }));
    const collections = this.plugin.settings.collections;
    for (const collection of collections) {
      const setting = new import_obsidian.Setting(containerEl).setName(collection.name).setDesc(collection.description || "\u65E0\u63CF\u8FF0");
      setting.addButton((button) => button.setIcon("pencil").setTooltip("\u7F16\u8F91").onClick(async () => {
        const modal = new CollectionModal(
          this.app,
          async (result) => {
            if (result) {
              collection.name = result.name;
              collection.description = result.description;
              await this.plugin.saveSettings();
              
              // 刷新所有打开的 Note Collector 视图
              this.app.workspace.getLeavesOfType("note-collector-view").forEach((leaf) => {
                if (leaf.view instanceof NoteCollectorView) {
                  leaf.view.onOpen();
                }
              });
              
              this.display();
            }
          },
          collection
        );
        modal.open();
      }));
      setting.addButton((button) => button.setIcon("eraser")
        .setTooltip("\u6E05\u7A7A\u6536\u96C6\u7BB1")
        .onClick(async () => {
          // 创建确认清空的 Modal
          const confirmClearModal = new import_obsidian.Modal(this.app);
          confirmClearModal.title = "确认清空";
          confirmClearModal.contentEl.createEl("p", { text: "\u786E\u5B9A\u8981\u6E05\u7A7A\u8FD9\u4E2A\u6536\u96C6\u7BB1\u5417\uFF1F\u6240\u6709\u76F8\u5173\u7684\u6536\u85CF\u5185\u5BB9\u5C06\u88AB\u5220\u9664\u3002" });

          confirmClearModal.contentEl.createEl("button", {
            text: "确认",
            cls: "mod-warning",
            onclick: async () => {
              this.plugin.settings.fragments = this.plugin.settings.fragments.filter(
                (f) => f.collectionId !== collection.id
              );
              await this.plugin.saveSettings();
              
              // 刷新所有��开的 Note Collector 视图
              this.app.workspace.getLeavesOfType("note-collector-view").forEach((leaf) => {
                if (leaf.view instanceof NoteCollectorView) {
                  leaf.view.refresh();
                }
              });
              
              new import_obsidian.Notice("\u6536\u96C6\u7BB1\u5DF2\u6E05\u7A7A");
              this.display(); // 刷新设置界面
              confirmClearModal.close(); // 关闭确认 Modal
            }
          });

          confirmClearModal.contentEl.createEl("button", {
            text: "取消",
            cls: "mod-cancel",
            onclick: () => {
              confirmClearModal.close(); // 关闭 Modal
            }
          });

          confirmClearModal.open(); // 打开确认 Modal
        }));

      // 删除收集箱按钮
      setting.addButton((button) => button.setIcon("trash").setTooltip("\u5220\u9664").onClick(async () => {
        // 创建确认删除的 Modal
        const confirmDeleteModal = new import_obsidian.Modal(this.app);
        confirmDeleteModal.title = "确认删除";
        confirmDeleteModal.contentEl.createEl("p", { text: "\u786E\u5B9A\u8981\u5220\u9664\u8FD9\u4E2A\u6536\u96C6\u7BB1\u5417\uFF1F\u6240\u6709\u76F8\u5173\u7684\u6536\u85CF\u5185\u5BB9\u4E5F\u4F1A\u88AB\u5220\u9664\u3002" });

        confirmDeleteModal.contentEl.createEl("button", {
          text: "确认",
          cls: "mod-warning",
          onclick: async () => {
            // 删除收集箱和相关片段
            this.plugin.settings.collections = this.plugin.settings.collections.filter(
              (c) => c.id !== collection.id
            );
            this.plugin.settings.fragments = this.plugin.settings.fragments.filter(
              (f) => f.collectionId !== collection.id
            );
            if (this.plugin.settings.defaultCollectionId === collection.id) {
              this.plugin.settings.defaultCollectionId = null;
            }
            await this.plugin.saveSettings();

            // 刷新所有打开的 Note Collector 视图
            this.app.workspace.getLeavesOfType("note-collector-view").forEach((leaf) => {
              if (leaf.view instanceof NoteCollectorView) {
                leaf.view.onOpen(); // 确保视图更新
              }
            });

            this.display(); // 刷新设置界面
            confirmDeleteModal.close(); // 关闭确认 Modal
          }
        });

        confirmDeleteModal.contentEl.createEl("button", {
          text: "取消",
          cls: "mod-cancel",
          onclick: () => {
            confirmDeleteModal.close(); // 关闭 Modal
          }
        });

        confirmDeleteModal.open(); // 打开确认 Modal
      }));

      if (this.plugin.settings.defaultCollectionId !== collection.id) {
        setting.addButton((button) => button.setIcon("star").setTooltip("\u8BBE\u4E3A\u9ED8\u8BA4").onClick(async () => {
          this.plugin.settings.defaultCollectionId = collection.id;
          await this.plugin.saveSettings();
          this.display();
        }));
      }
    }
  }
};
var CollectionModal = class extends import_obsidian.Modal {
  constructor(app, callback, collection) {
    super(app);
    this.callback = callback;
    this.collection = collection;
  }
  
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.collection) {
      contentEl.createEl("h2", { text: "\u7F16\u8F91\u6536\u96C6\u7BB1" });
    } else {
      contentEl.createEl("h2", { text: "\u521B\u5EFA\u65B0\u6536\u96C6\u7BB1" });
    }
    
    // 修复名称输入字段
    const nameSettingContainer = contentEl.createDiv();
    const nameSetting = new import_obsidian.Setting(nameSettingContainer)
      .setName("\u540D\u79F0")
      .setDesc("\u8F93\u5165\u6536\u96C6\u7BB1\u540D\u79F0")
      .addText(text => {
        this.nameInput = text;
        text.setValue(this.collection?.name || "");
        return text;
      });

    // 修复描述输入字段
    const descSettingContainer = contentEl.createDiv();
    const descSetting = new import_obsidian.Setting(descSettingContainer)
      .setName("\u63CF\u8FF0")
      .setDesc("\u8F93\u5165\u6536\u96C6\u7BB1\u63CF\u8FF0\uFF08\u53EF\u9009\uFF09")
      .addTextArea(text => {
        this.descInput = text;
        text.setValue(this.collection?.description || "");
        return text;
      });

    // 按钮容器
    const buttonContainer = contentEl.createDiv();
    new import_obsidian.Setting(buttonContainer)
      .addButton(btn => 
        btn.setButtonText("\u4FDD\u5B58")
          .setCta()
          .onClick(() => {
            const name = this.nameInput.getValue().trim();
            const description = this.descInput.getValue().trim();
            
            if (!name) {
              new import_obsidian.Notice("\u8BF7\u8F93\u5165\u6536\u96C6\u7BB1\u540D\u79F0");
              return;
            }
            
            this.callback({ name, description });
            this.close();
          })
      )
      .addButton(btn => 
        btn.setButtonText("\u53D6\u6D88")
          .onClick(() => {
            this.callback(null);
            this.close();
          })
      );
  }
  
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var NoteCollectorView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.currentCollectionId = this.plugin.settings.defaultCollectionId;
  }
  getViewType() {
    return "note-collector-view";
  }
  getDisplayText() {
    return "Note Collector";
  }
  async onOpen() {
    const container = this.containerEl;
    container.empty();
    container.addClass("note-collector-view");
    
    const headerEl = container.createDiv("note-collector-header");
    
    // 添加收集箱选择下拉框
    const selectContainer = headerEl.createDiv("collection-selector");
    const select = selectContainer.createEl("select");
    
    // 填充收集箱选项
    this.plugin.settings.collections.forEach((collection) => {
      const option = select.createEl("option", {
        value: collection.id,
        text: collection.name
      });
    });
    
    // 设置当前选中的收集箱
    select.value = this.currentCollectionId;
    
    // 监听切换事件
    select.addEventListener("change", async (e) => {
      this.currentCollectionId = e.target.value;
      await this.refresh();
    });
    
    headerEl.createEl("h4", { text: "收藏内容" });
    const contentEl = container.createDiv("note-collector-content");
    await this.refresh();
  }
  async refresh() {
    const contentEl = this.containerEl.querySelector(".note-collector-content");
    if (!contentEl) return;
    contentEl.empty();
    
    // 更新选择框的值
    const select = this.containerEl.querySelector(".collection-selector select");
    if (select) {
      select.value = this.currentCollectionId;
    }
    
    // 根据当前选中的收集箱过滤内容
    const fragments = this.plugin.settings.fragments.filter(
      f => f.collectionId === this.currentCollectionId
    );
    
    if (!fragments || fragments.length === 0) {
      contentEl.createEl("p", { text: "还没有收藏任何内容" });
      return;
    }
    
    // 按时间倒序排序
    fragments.sort((a, b) => b.createdTime - a.createdTime);
    
    // 渲染片段
    for (const fragment of fragments) {
      const fragmentEl = contentEl.createEl("div", { cls: "fragment-container" });
      
      // 创建可选择的内容容器
      const contentContainer = fragmentEl.createEl("div", { 
        cls: "fragment-content selectable",
        attr: {
          'contenteditable': 'true',
          'spellcheck': 'false',
          'data-readonly': 'true'
        }
      });
      
      // 渲染 Markdown 内容
      await import_obsidian.MarkdownRenderer.renderMarkdown(
        fragment.content,
        contentContainer,
        "",
        this
      );
      
      // 创建按钮容器
      const buttonContainer = fragmentEl.createEl("div", { cls: "fragment-actions" });

      // 添加展开/收起按钮
      const toggleButton = buttonContainer.createEl("button", {
        text: "展开",
        cls: "toggle-button"
      });

      toggleButton.addEventListener('click', () => {
        contentContainer.classList.toggle('expanded'); // 切换展开状态
        toggleButton.textContent = contentContainer.classList.contains('expanded') ? "收起" : "展开"; // 更新按钮文本
      });

      // 添加删除按钮
      const deleteButton = buttonContainer.createEl("button", {
        text: "删除",
        cls: "delete-button"
      });

      deleteButton.addEventListener('click', async () => {
        // 删除逻辑
        const confirmDeleteModal = new import_obsidian.Modal(this.app);
        confirmDeleteModal.title = "确认删除";
        confirmDeleteModal.contentEl.createEl("p", { text: "确定要删除这条收藏吗？" });

        confirmDeleteModal.contentEl.createEl("button", {
          text: "确认",
          cls: "mod-warning",
          onclick: async () => {
            await this.plugin.deleteFragment(fragment.id);
            await this.refresh();
            confirmDeleteModal.close();
          }
        });

        confirmDeleteModal.contentEl.createEl("button", {
          text: "取消",
          cls: "mod-cancel",
          onclick: () => {
            confirmDeleteModal.close();
          }
        });

        confirmDeleteModal.open();
      });

      // 将按钮容器添加到片段元素中
      fragmentEl.appendChild(buttonContainer);

      // 添加拖动事件
      contentContainer.setAttribute('draggable', 'true');
      contentContainer.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text/plain', fragment.content);
        e.dataTransfer.effectAllowed = 'copy';
        
        // 视觉反馈
        contentContainer.style.opacity = '0.5';
        contentContainer.style.border = '2px dashed var(--interactive-accent)';
        
        // 更改光标样式
        document.body.classList.add('dragging');
      });

      contentContainer.addEventListener('dragend', () => {
        // 恢复样式
        contentContainer.style.opacity = '1';
        contentContainer.style.border = 'none';
        
        // 恢复光标样式
        document.body.classList.remove('dragging');
      });

      // 添加放置事件
      contentContainer.addEventListener('dragover', (e) => {
        e.preventDefault();
      });

      contentContainer.addEventListener('drop', (e) => {
        e.preventDefault();
        const content = e.dataTransfer.getData('text/plain');
        const editor = this.app.workspace.activeLeaf.view.editor;
        if (editor) {
          const cursor = editor.getCursor();
          editor.replaceRange(content, cursor);
        }
      });
      
      // 取消拖动操作
      contentContainer.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          e.preventDefault();
          contentContainer.style.opacity = '1';
          contentContainer.style.border = 'none';
          document.body.classList.remove('dragging'); // 恢复光标样式
        }
      });
      
      // 添加只读事件监听器
      contentContainer.addEventListener('input', (e) => {
        e.preventDefault();
        contentContainer.innerHTML = ''; // 清空任何更改
        // 重新渲染原始内容
        import_obsidian.MarkdownRenderer.renderMarkdown(
          fragment.content,
          contentContainer,
          "",
          this
        );
      });
      
      // 添加提示信息
      const tipEl = fragmentEl.createEl("div", {
        cls: "fragment-tip",
        text: "提示：可以直接选择并拖拽内容到笔记中"
      });
      
      const metaEl = fragmentEl.createEl("div", {
        cls: "fragment-meta",
        text: `收藏于: ${new Date(fragment.createdTime).toLocaleString()}`
      });
      
      const backlinkEl = fragmentEl.createEl("div", { cls: "fragment-backlink" });
      const link = backlinkEl.createEl("a", {
        text: `来源: ${fragment.sourceFile}`,
        href: fragment.sourcePath,
        cls: "fragment-source-link"
      });
      link.addEventListener("click", async (e) => {
        e.preventDefault();
        
        // 打开文件
        const sourceLeaf = this.app.workspace.getLeaf();
        await sourceLeaf.openFile(this.app.vault.getAbstractFileByPath(fragment.sourcePath));
        
        // 获取编辑器
        const editor = sourceLeaf.view.editor;
        if (editor) {
          // 使用内容搜索定位到片段位置
          const content = editor.getValue();
          const position = content.indexOf(fragment.content);
          
          if (position !== -1) {
            // 计算行号
            const textBeforeFragment = content.substring(0, position);
            const lineNumber = textBeforeFragment.split('\n').length - 1;
            
            // 滚动到对应位置并高亮
            editor.setCursor(lineNumber, 0);
            editor.scrollIntoView({from: {line: lineNumber, ch: 0}, to: {line: lineNumber + fragment.content.split('\n').length, ch: 0}}, true);
            
            // 临时高亮显示
            const highlightId = editor.addHighlight({
              from: {line: lineNumber, ch: 0},
              to: {line: lineNumber + fragment.content.split('\n').length - 1, ch: fragment.content.split('\n').slice(-1)[0].length}
            }, "search-result");
            
            // 3秒后移除高亮
            setTimeout(() => {
              editor.removeHighlight(highlightId);
            }, 3000);
          }
        }
      });
    }
  }
  async navigateToSource(fragment) {
    const file = this.app.vault.getAbstractFileByPath(fragment.sourcePath);
    if (file instanceof import_obsidian.TFile) {
      const leaf = this.app.workspace.getLeaf();
      await leaf.openFile(file);
    } else {
      new import_obsidian.Notice("\u65E0\u6CD5\u627E\u5230\u539F\u59CB\u6587\u4EF6");
    }
  }
  async deleteFragment(fragment) {
    const confirmed = await new Promise((resolve) => {
      const notice = new import_obsidian.Notice("", 0);
      notice.noticeEl.innerHTML = `
                <div>\u786E\u5B9A\u8981\u5220\u9664\u8FD9\u6761\u6536\u85CF\u5417\uFF1F</div>
                <div style="display: flex; justify-content: flex-end; gap: 8px; margin-top: 8px;">
                    <button class="mod-warning" onclick="this.parentElement.dataset.action='confirm'">\u786E\u5B9A</button>
                    <button onclick="this.parentElement.dataset.action='cancel'">\u53D6\u6D88</button>
                </div>
            `;
      notice.noticeEl.addEventListener("click", (e) => {
        var _a;
        const target = e.target;
        const action = (_a = target.closest("[data-action]")) == null ? void 0 : _a.getAttribute("data-action");
        if (action) {
          notice.hide();
          resolve(action === "confirm");
        }
      });
    });
    if (!confirmed)
      return;
    this.plugin.settings.fragments = this.plugin.settings.fragments.filter(
      (f) => f.id !== fragment.id
    );
    await this.plugin.saveSettings();
    await this.refresh();
    new import_obsidian.Notice("\u6536\u85CF\u5185\u5BB9\u5DF2\u5220\u9664");
  }
};
